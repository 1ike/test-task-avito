{"version":3,"sources":["components/RefreshButton/RefreshButton.module.scss","features/shared.ts","app/config.ts","app/lib.ts","features/story.ts","app/API.ts","features/comment.ts","app/store.ts","serviceWorker.ts","app/hooks.ts","components/Layout.tsx","components/DelimiterVertical.tsx","components/RefreshButton/index.tsx","pages/Home/NavbarComponent.tsx","pages/Home/index.tsx","pages/Story/Comment.tsx","pages/Story/NavbarComponent/index.tsx","pages/Story/index.tsx","index.tsx","pages/Story/Story.module.scss","pages/Home/Home.module.scss","pages/Story/NavbarComponent/NavbarComponent.module.scss"],"names":["module","exports","RequestStatus","HACKER_NEWS_API_URL","transformDate","time","formatDate","Date","toLocaleString","year","month","day","storyApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getNewStories","query","queryFn","_arg","_queryApi","_extraOptions","fetchWithBQ","idsResult","error","ids","data","storyPromises","slice","map","id","Promise","all","results","find","result","story","useGetNewStoriesQuery","promises","fetch","method","then","response","json","fetchComments","createAsyncThunk","commentIds","a","fetchAllComments","commentsAcc","length","API","comments","filteredComments","filter","comment","deleted","childrenIds","reduce","acc","kids","commentsAdapter","createEntityAdapter","initialState","getInitialState","loading","Idle","reducer","createSlice","name","reducers","extraReducers","addCase","pending","state","Pending","fulfilled","action","upsertMany","payload","getSelectors","selectCommentEntities","selectById","selectIds","selectEntities","selectAllComments","selectAll","selectStoryCommentsQty","selectTotal","createSelector","_","rootCommentIds","commentEntities","entities","filterDeleted","filteredCommentsFilteredIds","qty","getCommentsQty","idsAcc","selectIsCommentsLoading","store","configureStore","commentsReducer","middleware","getDefaultMiddleware","concat","Boolean","window","location","hostname","match","useAppSelector","useSelector","useTitle","titleOrFn","deps","useEffect","document","title","Layout","children","NavbarComponent","navbarComponent","Navbar","bg","expand","Container","Brand","to","className","DelimiterVertical","iconStyle","width","height","RefreshButton","props","tooltipText","tooltipPlacement","onClick","disabled","OverlayTrigger","placement","overlay","tooltipProps","Tooltip","Button","style","classNames","styles","rotating","isFetching","Index","useState","displayedQty","setDisplayedQty","undefined","pollingInterval","stories","refetch","isLoading","displayedStories","React","useMemo","showMore","useCallback","prev","content","Spinner","animation","variant","Card","Body","Title","Subtitle","score","by","renderComments","c","Comment","rootCommentsState","expandComment","isRootCommentHasChildren","some","parent","comment__header","size","Text","dangerouslySetInnerHTML","__html","sanitizeHtml","text","button","icon","ContentWrapper","Story","idFromParams","useParams","Number","cachedStory","selectFromResult","item","setStory","expandRootCommentInitialState","commentId","setRootCommentsState","onExpandRootCommentClick","memoize","prevState","dispatch","useDispatch","refreshComments","timer","refresh","setTimeout","clearTimeout","s","rootComments","commentsQty","isCommentsLoading","url","isEmpty","ReactDOM","render","StrictMode","exact","component","Home","path","NewsItem","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.51c1d5ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rotating\":\"RefreshButton_rotating__28Fr1\"};","export enum RequestStatus {\n  Idle = 'idle',\n  Pending = 'pending',\n  Fulfilled = 'fulfilled',\n  Rejected = 'rejected',\n}\n","export const HACKER_NEWS_API_URL = 'https://hacker-news.firebaseio.com/v0/';\n\nexport const POLLING_INTERVAL = 60000;\n\nexport const STORIES_QTY = 100;\nexport const STORIES_QTY_PER_PAGE = 10;\n","export const transformDate = (time: number) => time * 1000;\n\nexport const formatDate = (time: number) => (new Date(time)).toLocaleString('en', {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n});\n","import {\n  createApi,\n  fetchBaseQuery,\n  FetchBaseQueryError, FetchBaseQueryMeta,\n} from '@reduxjs/toolkit/query/react';\n\nimport { QueryReturnValue } from '@reduxjs/toolkit/dist/query/baseQueryTypes';\nimport { HACKER_NEWS_API_URL, STORIES_QTY } from '../app/config';\nimport { BaseEntityInterface } from '../app/types';\nimport { transformDate } from '../app/lib';\n\n\nexport interface StoryInterface extends BaseEntityInterface {\n  title: string;\n  score: number;\n  url?: string;\n  text?: string;\n}\n\nexport const storyApi = createApi({\n  reducerPath: 'storyApi',\n  baseQuery: fetchBaseQuery({ baseUrl: HACKER_NEWS_API_URL }),\n  endpoints: (builder) => ({\n    getNewStories: builder.query<StoryInterface[], void>({\n      async queryFn(_arg, _queryApi, _extraOptions, fetchWithBQ) {\n        const idsResult = await fetchWithBQ('newstories.json');\n        if (idsResult.error) return { error: idsResult.error as FetchBaseQueryError };\n\n        const ids = idsResult.data as string[];\n\n        const storyPromises = ids.slice(0, STORIES_QTY).map((id) => fetchWithBQ(`item/${id}.json`));\n\n        const results = (await Promise.all(storyPromises)) as QueryReturnValue<\n          StoryInterface,\n          FetchBaseQueryError,\n          FetchBaseQueryMeta\n          >[];\n        const error = results.find((result) => result.error);\n\n        return error\n          ? { error: error as FetchBaseQueryError }\n          : {\n            data: results.map(\n              ({ data: story }) => ({ ...story, time: transformDate(story?.time || 0) }),\n            ) as StoryInterface[],\n          };\n      },\n    }),\n  }),\n});\n\n\nexport const { useGetNewStoriesQuery } = storyApi;\n","import { HACKER_NEWS_API_URL } from './config';\nimport { IDs } from './types';\nimport { transformDate } from './lib';\nimport type { StoryInterface } from '../features/story';\nimport type { CommentInterface } from '../features/comment';\n\n\nconst fetchByIds = (ids: IDs): Promise<(StoryInterface | CommentInterface)[]> => {\n  const promises = ids.map((id) => fetch(\n    `${HACKER_NEWS_API_URL}item/${id}.json`,\n    { method: 'GET' },\n  ).then((response) => response.json())\n    .then((data) => ({ ...data, time: transformDate(data.time) })));\n\n  return Promise.all(promises);\n};\n\nexport default {\n  fetchByIds,\n};\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\n\nimport API from '../app/API';\nimport type { RootState } from '../app/store';\nimport { BaseEntityInterface, ID, IDs } from '../app/types';\nimport { RequestStatus } from './shared';\n\n\nexport interface CommentInterface extends BaseEntityInterface {\n  text: string;\n  parent?: ID;\n}\n\nexport const fetchComments = createAsyncThunk('comments/fetchAll', async (commentIds: IDs) => {\n  const fetchAllComments = async (\n    commentsAcc: CommentInterface[], ids:IDs,\n  ): Promise<CommentInterface[]> => {\n    if (ids.length === 0) return commentsAcc;\n\n    const comments = (await API.fetchByIds(ids)) as CommentInterface[];\n    const filteredComments = comments.filter((comment) => !comment.deleted);\n    const childrenIds: IDs = filteredComments.reduce(\n      (acc, comment) => {\n        const { kids = [] } = comment;\n        return kids.length > 0 ? [...acc, ...kids] : acc;\n      },\n      [] as IDs,\n    );\n\n    return fetchAllComments([...commentsAcc, ...filteredComments], childrenIds);\n  };\n\n  return fetchAllComments([], commentIds);\n});\n\nconst commentsAdapter = createEntityAdapter<CommentInterface>();\nconst initialState = commentsAdapter.getInitialState({\n  loading: RequestStatus.Idle,\n});\n\nexport const slice = createSlice({\n  name: 'comments',\n  initialState,\n  /* eslint-disable no-param-reassign */\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchComments.pending, (state) => {\n      if (state.loading === RequestStatus.Idle) {\n        state.loading = RequestStatus.Pending;\n      }\n    });\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      if (state.loading === RequestStatus.Pending) {\n        commentsAdapter.upsertMany(state, action.payload);\n        state.loading = RequestStatus.Idle;\n      }\n    });\n  },\n  /* eslint-enable no-param-reassign */\n});\n\nconst { reducer } = slice;\nexport default reducer;\n\nexport const {\n  selectById: selectCommentById,\n  selectIds: selectCommentIds,\n  selectEntities: selectCommentEntities,\n  selectAll: selectAllComments,\n  selectTotal: selectTotalComments,\n} = commentsAdapter.getSelectors((state: RootState) => state.comments);\n\n\nexport const selectStoryComments = createSelector(\n  selectCommentEntities,\n  (_: RootState, rootCommentIds: IDs) => rootCommentIds,\n  (commentEntities, ids) => {\n    const entities = ids.reduce(\n      (acc, id) => (commentEntities[id] ? { ...acc, [id]: commentEntities[id] } : acc),\n      {},\n    );\n\n    return { ids, entities };\n  },\n);\nexport const selectStoryCommentsQty = createSelector(\n  selectCommentEntities,\n  (_: RootState, rootCommentIds: IDs) => rootCommentIds,\n  (commentEntities, rootCommentIds) => {\n    const filterDeleted = (id: ID) => commentEntities[id] && !commentEntities[id]?.deleted;\n\n    const filteredCommentsFilteredIds = rootCommentIds.filter(filterDeleted);\n\n    const getCommentsQty = (acc: ID, ids: IDs): number => {\n      if (ids.length === 0) return acc;\n\n      const childrenIds = ids.reduce(\n        (idsAcc: IDs, id: ID) => {\n          const kids = commentEntities[id]?.kids?.filter(filterDeleted) || [];\n          return kids.length > 0 ? [...idsAcc, ...kids] : idsAcc;\n        },\n        [],\n      );\n\n      return childrenIds.length + getCommentsQty(acc, childrenIds);\n    };\n\n    const qty = getCommentsQty(filteredCommentsFilteredIds.length, filteredCommentsFilteredIds);\n\n    return qty;\n  },\n);\n\nexport const selectIsCommentsLoading = (state: RootState) => (\n  state.comments.loading === RequestStatus.Pending\n);\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\n// import counterReducer from '../features/counter/counterSlice';\nimport { storyApi } from '../features/story';\n// eslint-disable-next-line import/no-cycle\nimport commentsReducer from '../features/comment';\n\nexport const store = configureStore({\n  reducer: { [storyApi.reducerPath]: storyApi.reducer, comments: commentsReducer },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(storyApi.middleware),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport type { RootState, AppDispatch } from './store';\n\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n\ntype TitleOrFnType = string | (() => string);\nexport const useTitle = (titleOrFn: TitleOrFnType, deps: any[] = []) => {\n  useEffect(\n    () => {\n      document.title = typeof titleOrFn === 'function' ? titleOrFn() : titleOrFn;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps,\n  );\n};\n","import React from 'react';\nimport { Navbar, Container } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n\ninterface PropsInterface {\n  children: React.ReactNode,\n  // eslint-disable-next-line react/require-default-props\n  navbarComponent?: React.FunctionComponent\n}\n\nconst Layout = ({ children, navbarComponent: NavbarComponent }: PropsInterface) => (\n  <>\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Container>\n        <Navbar.Brand>\n          <Link\n            to=\"/\"\n            className=\"fs-2 ms-3 text-muted text-decoration-none\"\n          >\n            Avito test task\n          </Link>\n        </Navbar.Brand>\n        {NavbarComponent && <NavbarComponent />}\n      </Container>\n    </Navbar>\n    {children}\n  </>\n);\n\nexport default Layout;\n","import React from 'react';\n\n\nconst DelimiterVertical = () => <span className=\"ms-2 me-2\">|</span>;\n\nexport default DelimiterVertical;\n","import React from 'react';\nimport {\n  Button, OverlayTrigger, Tooltip, TooltipProps,\n} from 'react-bootstrap';\nimport { BsArrowRepeat } from 'react-icons/bs';\nimport { Placement } from 'react-bootstrap/types';\nimport classNames from 'classnames';\n\nimport styles from './RefreshButton.module.scss';\n\n\nconst iconSize = 25;\nconst iconStyle = {\n  width: iconSize,\n  height: iconSize,\n};\n\n/* eslint-disable react/require-default-props */\ninterface PropsInterface {\n  tooltipText?: string;\n  tooltipPlacement?: Placement;\n  onClick?: () => void;\n  disabled?: boolean;\n}\n/* eslint-enable react/require-default-props */\n\nconst RefreshButton = (props: PropsInterface) => {\n  const {\n    tooltipText = 'Refresh',\n    tooltipPlacement = 'top',\n    onClick,\n    disabled,\n  } = props;\n  const renderRefreshTooltip = (tooltipProps: TooltipProps) => (\n    // eslint-disable-next-line react/jsx-props-no-spreading\n    <Tooltip id=\"button-tooltip\" {...tooltipProps}>\n      {tooltipText}\n    </Tooltip>\n  );\n\n  return (\n    <OverlayTrigger placement={tooltipPlacement} overlay={renderRefreshTooltip}>\n      <Button className=\"ms-5\" onClick={onClick} disabled={disabled}>\n        <BsArrowRepeat style={iconStyle} className={classNames({ [styles.rotating]: disabled })} />\n      </Button>\n    </OverlayTrigger>\n  );\n};\n\nexport default RefreshButton;\n","import React from 'react';\n\nimport RefreshButton from '../../components/RefreshButton';\n\n\ninterface PropsInterface {\n  onClick: () => void;\n  isFetching: boolean;\n}\n\nconst NavbarComponent = ({ onClick, isFetching }: PropsInterface) => (\n  <div className=\"me-3\">\n    <RefreshButton\n      tooltipText=\"Refresh News\"\n      tooltipPlacement=\"left\"\n      onClick={onClick}\n      disabled={isFetching}\n    />\n  </div>\n);\n\nexport default NavbarComponent;\n","import React, { useCallback, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Button, Card, Container, Spinner,\n} from 'react-bootstrap';\n\nimport classNames from 'classnames';\nimport styles from './Home.module.scss';\nimport { useTitle } from '../../app/hooks';\nimport { useGetNewStoriesQuery } from '../../features/story';\nimport Layout from '../../components/Layout';\nimport DelimiterVertical from '../../components/DelimiterVertical';\nimport NavbarComponent from './NavbarComponent';\nimport { POLLING_INTERVAL, STORIES_QTY_PER_PAGE, STORIES_QTY } from '../../app/config';\nimport { formatDate } from '../../app/lib';\n\n\nfunction Index() {\n  useTitle('Hottest stories');\n\n  const [displayedQty, setDisplayedQty] = useState(STORIES_QTY_PER_PAGE);\n\n  const {\n    data: stories = [], refetch, isFetching, isLoading,\n  } = useGetNewStoriesQuery(undefined, {\n    pollingInterval: POLLING_INTERVAL,\n  });\n\n  const displayedStories = React.useMemo(\n    () => stories.slice(0, displayedQty),\n    [displayedQty, stories],\n  );\n\n  const showMore = useCallback(\n    () => setDisplayedQty((prev) => prev + STORIES_QTY_PER_PAGE),\n    [],\n  );\n\n  const NavbarComponentWrapper = () => (\n    <NavbarComponent onClick={refetch} isFetching={isFetching} />\n  );\n\n  return (\n    <Layout navbarComponent={NavbarComponentWrapper}>\n      <Container\n        className={classNames(styles.content, { [styles['content--loading']]: isLoading })}\n      >\n        { isLoading\n          ? <Spinner animation=\"border\" variant=\"primary\" />\n          : (\n            <>\n              {displayedStories.map((story) => (\n                <Link\n                  key={story.id}\n                  to={`/${story.id}`}\n                  className=\"text-start text-decoration-none d-block mb-2\"\n                >\n                  <Card bg=\"light\">\n                    <Card.Body>\n                      <Card.Title>{story.title}</Card.Title>\n                      <Card.Subtitle>\n                        {`${story.score} points`}\n                        <DelimiterVertical />\n                        {story.by}\n                        <DelimiterVertical />\n                        {formatDate(story.time)}\n                        {story.kids && (\n                          <>\n                            <DelimiterVertical />\n                            <span>Comments</span>\n                          </>\n                        )}\n                      </Card.Subtitle>\n                    </Card.Body>\n                  </Card>\n                </Link>\n              ))}\n              {displayedQty < STORIES_QTY && (\n                <Button\n                  variant=\"outline-primary\"\n                  onClick={showMore}\n                  className=\"mt-3\"\n                >\n                  Show more\n                </Button>\n              )}\n            </>\n          )}\n      </Container>\n    </Layout>\n  );\n}\n\nexport default Index;\n","import { Button, Card } from 'react-bootstrap';\nimport sanitizeHtml from 'sanitize-html';\nimport React from 'react';\n\nimport classNames from 'classnames';\nimport { CommentInterface } from '../../features/comment';\nimport styles from './Story.module.scss';\nimport DelimiterVertical from '../../components/DelimiterVertical';\nimport { ID, IDs } from '../../app/types';\nimport type { StateInterface } from './index';\nimport { formatDate } from '../../app/lib';\n\n\nconst renderComments = (comments: CommentInterface[], expand: Boolean, kids: IDs = []) => {\n  if (!kids) return null;\n\n  return kids.map((id: ID) => {\n    const comment = comments.find((c) => c.id === id);\n\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return comment && <Comment comment={comment} expand={expand} comments={comments} />;\n  });\n};\n\ninterface PropsInterface {\n  comment: CommentInterface;\n  comments: CommentInterface[];\n  // eslint-disable-next-line react/require-default-props\n  expand?: Boolean;\n  // eslint-disable-next-line react/require-default-props\n  onClick?: () => void;\n  // eslint-disable-next-line react/require-default-props\n  rootCommentsState?: StateInterface;\n}\n\nexport function Comment(props: PropsInterface) {\n  const {\n    comments, comment, onClick, rootCommentsState, expand: expandComment,\n  } = props;\n\n  const isRootCommentHasChildren = rootCommentsState\n    && comments.some((c) => c.parent === comment.id);\n\n  const expand = expandComment || (isRootCommentHasChildren && rootCommentsState?.[comment.id]);\n\n  return (\n    <Card\n      bg=\"light\"\n      className={classNames(\n        'mb-3',\n        { 'ms-4 mt-3': !rootCommentsState },\n      )}\n    >\n      <Card.Body>\n        <Card.Subtitle className={`text-muted ${styles.comment__header}`}>\n          {comment.by}\n          <DelimiterVertical />\n          {formatDate(comment.time)}\n          {isRootCommentHasChildren && (\n            <>\n              <DelimiterVertical />\n              <Button\n                variant=\"link\"\n                className=\"text-decoration-none\"\n                size=\"sm\"\n                onClick={onClick}\n              >\n                [\n                {expand ? 'hide answers' : 'show answers'}\n                ]\n              </Button>\n            </>\n          )}\n        </Card.Subtitle>\n        <Card.Text\n          className=\"mt-2\"\n          dangerouslySetInnerHTML={{ __html: sanitizeHtml(comment.text) }}\n        />\n        {expand && renderComments(comments, expand, comment?.kids)}\n      </Card.Body>\n    </Card>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap';\nimport { BsHouseDoor } from 'react-icons/bs';\n\nimport styles from './NavbarComponent.module.scss';\n\n\nconst NavbarComponent = () => (\n  <Link\n    to=\"/\"\n    className=\"fs-2 ms-3 justify-content-end\"\n  >\n    <Button className={styles.button} variant=\"light\">\n      <BsHouseDoor className={styles.icon} />\n      Back to the News List\n    </Button>\n  </Link>\n);\n\nexport default NavbarComponent;\n","import React, {\n  useCallback, useMemo, useState, ReactNode,\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { isEmpty, memoize } from 'lodash';\nimport { Spinner } from 'react-bootstrap';\n\nimport sanitizeHtml from 'sanitize-html';\nimport { useAppDispatch, useAppSelector, useTitle } from '../../app/hooks';\nimport { StoryInterface, useGetNewStoriesQuery } from '../../features/story';\nimport {\n  CommentInterface,\n  fetchComments,\n  selectAllComments, selectIsCommentsLoading,\n  selectStoryCommentsQty,\n} from '../../features/comment';\nimport { ID, IDs } from '../../app/types';\nimport { Comment } from './Comment';\nimport RefreshButton from '../../components/RefreshButton';\nimport Layout from '../../components/Layout';\nimport NavbarComponent from './NavbarComponent';\nimport { POLLING_INTERVAL } from '../../app/config';\nimport styles from './Story.module.scss';\nimport API from '../../app/API';\nimport { formatDate } from '../../app/lib';\n\n\nconst ContentWrapper = ({ children }: { children: ReactNode }) => (\n  <Layout navbarComponent={NavbarComponent}>\n    <div className=\"container pt-2\">\n      {children}\n    </div>\n  </Layout>\n);\n\nexport interface StateInterface { [id: number]: Boolean }\n\nfunction Story() {\n  const { id: idFromParams } = useParams<{ id: string }>();\n  const id = Number(idFromParams);\n\n  useTitle(() => `title ${id}`, [id]);\n\n  const { story: cachedStory } = useGetNewStoriesQuery(\n    undefined,\n    {\n      selectFromResult: ({ data }) => ({ story: data?.find((item) => item.id === id) }),\n    },\n  );\n\n  const [story, setStory] = useState(cachedStory);\n\n  const rootCommentIds: IDs = useMemo(() => story?.kids || [], [story]);\n  const expandRootCommentInitialState: StateInterface = rootCommentIds\n    .reduce((acc, commentId: ID) => ({ ...acc, [commentId]: false }), {});\n  const [rootCommentsState, setRootCommentsState] = useState(expandRootCommentInitialState);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const onExpandRootCommentClick = useCallback(memoize(\n    (commentId: ID) => () => setRootCommentsState(\n      (prevState) => ({ ...prevState, [commentId]: !prevState[commentId] }),\n    ),\n  ),\n  []);\n\n\n  const dispatch = useAppDispatch();\n  const refreshComments = useCallback(\n    () => dispatch(fetchComments(rootCommentIds)),\n    [dispatch, rootCommentIds],\n  );\n\n  React.useEffect(() => {\n    if (!story) {\n      API.fetchByIds([id]).then(([s]) => setStory(s as StoryInterface));\n\n      return undefined;\n    }\n\n    let timer: ReturnType<typeof setTimeout>;\n    const refresh = () => {\n      refreshComments();\n      timer = setTimeout(() => {\n        refresh();\n      }, POLLING_INTERVAL);\n    };\n    refresh();\n\n    return () => clearTimeout(timer);\n  }, [refreshComments, story, id]);\n\n\n  const comments = useAppSelector(selectAllComments);\n  const rootComments: CommentInterface[] = React.useMemo(\n    () => comments.filter((comment) => comment.parent === Number(id)), [id, comments],\n  );\n\n  const commentsQty: ID = useAppSelector(\n    (state) => selectStoryCommentsQty(state, rootCommentIds),\n  );\n  const isCommentsLoading: boolean = useAppSelector(selectIsCommentsLoading);\n\n  if (!story) {\n    return (\n      <ContentWrapper>\n        <div className={styles['story--loading']}>\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </div>\n      </ContentWrapper>\n    );\n  }\n\n  return (\n    <ContentWrapper>\n      <h1 className=\"mt-4 mb-4\">{story.title}</h1>\n      <dl className=\"row\">\n        <dt className=\"col-sm-1\">Author</dt>\n        <dd className=\"col-sm-11\">{story.by}</dd>\n\n        <dt className=\"col-sm-1\">Date</dt>\n        <dd className=\"col-sm-11\">{formatDate(story.time)}</dd>\n\n        {story.url && (\n          <>\n            <dt className=\"col-sm-1\">link</dt>\n            <dd className=\"col-sm-11\">{story.url}</dd>\n          </>\n        )}\n\n        {/* eslint-disable react/no-danger */\n          story.text && (\n            <>\n              <dt className=\"col-sm-1\">Text</dt>\n              <dd\n                className=\"col-sm-11\"\n                dangerouslySetInnerHTML={{ __html: sanitizeHtml(story.text) }}\n              />\n            </>\n          )\n          /* eslint-enable react/no-danger */\n        }\n\n      </dl>\n      {isEmpty(rootComments) ? null : (\n        <>\n          <div className=\"d-flex align-items-center mt-5 mb-4\">\n            <h2>\n              Comments (\n              {commentsQty}\n              )\n            </h2>\n            <RefreshButton\n              onClick={refreshComments}\n              disabled={isCommentsLoading}\n              tooltipText=\"Refresh comments\"\n            />\n          </div>\n          {rootComments.map((comment: CommentInterface) => (\n            <Comment\n              key={comment.id}\n              comment={comment}\n              onClick={onExpandRootCommentClick(comment.id)}\n              rootCommentsState={rootCommentsState}\n              comments={comments}\n            />\n          ))}\n          {}\n        </>\n      )}\n    </ContentWrapper>\n  );\n}\n\nexport default Story;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport { store } from './app/store';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\nimport Home from './pages/Home';\nimport NewsItem from './pages/Story';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact component={Home} path=\"/\" />\n          <Route component={NewsItem} path=\"/:id\" />\n        </Switch>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments--loading\":\"Story_comments--loading__1vnw4\",\"story--loading\":\"Story_story--loading__v6jwJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Home_content__2Q55q\",\"content--loading\":\"Home_content--loading__1nnvB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"NavbarComponent_button__1NXhp\",\"icon\":\"NavbarComponent_icon__2QjTR\"};"],"sourceRoot":""}